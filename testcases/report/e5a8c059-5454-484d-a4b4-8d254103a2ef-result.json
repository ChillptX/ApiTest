{"name": "test_spuinfosave", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n..\\venv\\lib\\site-packages\\requests\\models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python39\\lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nD:\\Python39\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x00000216EECEE2E0>\ns = '<!DOCTYPE html>\\n<html lang=\"en\">\\n<head>\\n<meta charset=\"utf-8\">\\n<title>Error</title>\\n</head>\\n<body>\\n<pre>Cannot POST /product/spuinfo/save</pre>\\n</body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\Python39\\lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nspuinfo_save_url = 'http://localhost:8001/product/spuinfo/save'\n\n    def test_spuinfosave(spuinfo_save_url):\n        r = requests.post(spuinfo_save_url,params={\n            \"spuName\": \"iphone 14 pro\",\n            \"spuDescription\": \"iphone 14 pro\",\n            \"catalogId\": \"225\",\n            \"brandId\": \"12\",\n            \"weight\": \"0.2\",\n            \"publishStatus\": \"0\",\n            \"decript\": [\n                \"https://gulimall-hello.oss-cn-beijing.aliyuncs.com/2019-11-22//66d30b3f-e02f-48b1-8574-e18fdf454a32_f205d9c99a2b4b01.jpg\"],\n            \"images\": [\n                \"https://gulimall-hello.oss-cn-beijing.aliyuncs.com/2019-11-22//dcfcaec3-06d8-459b-8759-dbefc247845e_5b5e74d0978360a1.jpg\",\n                \"https://gulimall-hello.oss-cn-beijing.aliyuncs.com/2019-11-22//5b15e90a-a161-44ff-8e1c-9e2e09929803_749d8efdff062fb0.jpg\"],\n            \"bounds\": {\n                \"buyBounds\": \"500\",\n                \"growBounds\": \"6000\"\n            },\n            \"baseAttrs\": [{\n                \"attrId\": \"7\",\n                \"attrValues\": \"aaa;bb\",\n                \"showDesc\": \"1\"\n            }, {\n                \"attrId\": \"8\",\n                \"attrValues\": \"2019\",\n                \"showDesc\": \"0\"\n            }],\n            \"skus\": [{\n                \"attr\": [{\n                    \"attrId\": \"9\",\n                    \"attrName\": \"颜色\",\n                    \"attrValue\": \"黑色\"\n                }, {\n                    \"attrId\": \"10\",\n                    \"attrName\": \"内存\",\n                    \"attrValue\": \"6GB\"\n                }],\n                \"skuName\": \"Apple XR 黑色 6GB\",\n                \"price\": \"1999\",\n                \"skuTitle\": \"Apple XR 黑色 6GB\",\n                \"skuSubtitle\": \"Apple XR 黑色 6GB\",\n                \"images\": [{\n                    \"imgUrl\": \"https://gulimall-hello.oss-cn-beijing.aliyuncs.com/2019-11-22//dcfcaec3-06d8-459b-8759-dbefc247845e_5b5e74d0978360a1.jpg\",\n                    \"defaultImg\": \"1\"\n                }, {\n                    \"imgUrl\": \"https://gulimall-hello.oss-cn-beijing.aliyuncs.com/2019-11-22//5b15e90a-a161-44ff-8e1c-9e2e09929803_749d8efdff062fb0.jpg\",\n                    \"defaultImg\": \"0\"\n                }],\n                \"descar\": [\"黑色\", \"6GB\"],\n                \"fullCount\": \"5\",\n                \"discount\": \"0.98\",\n                \"countStatus\": \"1\",\n                \"fullPrice\": \"1000\",\n                \"reducePrice\": \"10\",\n                \"priceStatus\": \"0\",\n                \"memberPrice\": [{\n                    \"id\": 1,\n                    \"name\": \"aaa\",\n                    \"price\": \"1998.99\"\n                }]\n            }, {\n                \"attr\": [{\n                    \"attrId\": \"9\",\n                    \"attrName\": \"颜色\",\n                    \"attrValue\": \"黑色\"\n                }, {\n                    \"attrId\": \"10\",\n                    \"attrName\": \"内存\",\n                    \"attrValue\": \"12GB\"\n                }],\n                \"skuName\": \"Apple XR 黑色 12GB\",\n                \"price\": \"2999\",\n                \"skuTitle\": \"Apple XR 黑色 12GB\",\n                \"skuSubtitle\": \"Apple XR 黑色 6GB\",\n                \"images\": [{\n                    \"imgUrl\": \"\",\n                    \"defaultImg\": \"0\"\n                }, {\n                    \"imgUrl\": \"\",\n                    \"defaultImg\": \"0\"\n                }],\n                \"descar\": [\"黑色\", \"12GB\"],\n                \"fullCount\": \"0\",\n                \"discount\": \"0\",\n                \"countStatus\": \"0\",\n                \"fullPrice\": \"0\",\n                \"reducePrice\": \"0\",\n                \"priceStatus\": \"0\",\n                \"memberPrice\": [{\n                    \"id\": \"1\",\n                    \"name\": \"aaa\",\n                    \"price\": \"1998.99\"\n                }]\n            }, {\n                \"attr\": [{\n                    \"attrId\": \"9\",\n                    \"attrName\": \"颜色\",\n                    \"attrValue\": \"白色\"\n                }, {\n                    \"attrId\": \"10\",\n                    \"attrName\": \"内存\",\n                    \"attrValue\": \"6GB\"\n                }],\n                \"skuName\": \"Apple XR 白色 6GB\",\n                \"price\": \"1998\",\n                \"skuTitle\": \"Apple XR 白色 6GB\",\n                \"skuSubtitle\": \"Apple XR 黑色 6GB\",\n                \"images\": [{\n                    \"imgUrl\": \"\",\n                    \"defaultImg\": \"0\"\n                }, {\n                    \"imgUrl\": \"\",\n                    \"defaultImg\": \"0\"\n                }],\n                \"descar\": [\"白色\", \"6GB\"],\n                \"fullCount\": \"0\",\n                \"discount\": \"0\",\n                \"countStatus\": \"0\",\n                \"fullPrice\": \"0\",\n                \"reducePrice\": \"0\",\n                \"priceStatus\": \"0\",\n                \"memberPrice\": [{\n                    \"id\": \"1\",\n                    \"name\": \"aaa\",\n                    \"price\": \"1998.99\"\n                }]\n            }, {\n                \"attr\": [{\n                    \"attrId\": \"9\",\n                    \"attrName\": \"颜色\",\n                    \"attrValue\": \"白色\"\n                }, {\n                    \"attrId\": \"10\",\n                    \"attrName\": \"内存\",\n                    \"attrValue\": \"12GB\"\n                }],\n                \"skuName\": \"Apple XR 白色 12GB\",\n                \"price\": \"2998\",\n                \"skuTitle\": \"Apple XR 白色 12GB\",\n                \"skuSubtitle\": \"Apple XR 黑色 6GB\",\n                \"images\": [{\n                    \"imgUrl\": \"\",\n                    \"defaultImg\": \"0\"\n                }, {\n                    \"imgUrl\": \"\",\n                    \"defaultImg\": \"0\"\n                }],\n                \"descar\": [\"白色\", \"12GB\"],\n                \"fullCount\": \"0\",\n                \"discount\": \"0\",\n                \"countStatus\": \"0\",\n                \"fullPrice\": \"0\",\n                \"reducePrice\": \"0\",\n                \"priceStatus\": \"0\",\n                \"memberPrice\": [{\n                    \"id\": 1,\n                    \"name\": \"aaa\",\n                    \"price\": \"1998.99\"\n                }]\n            }]\n        })\n    \n>       assert \"UTF-8\" in r.json()\n\ntest_spuinfosave.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\venv\\lib\\site-packages\\requests\\models.py:975: JSONDecodeError"}, "start": 1709822340620, "stop": 1709822342661, "uuid": "0a329713-d9c7-47eb-a36f-4fc29231d4a8", "historyId": "f00ec6a6da873ba3592d44903715b85a", "testCaseId": "f00ec6a6da873ba3592d44903715b85a", "fullName": "testcases.test_spuinfosave#test_spuinfosave", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_spuinfosave"}, {"name": "host", "value": "Liangzaixian"}, {"name": "thread", "value": "11028-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_spuinfosave"}]}